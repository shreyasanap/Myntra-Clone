(function () {
  "use strict";
  var __webpack_modules__ = {
    858: function () {
      eval(
        "\n;// CONCATENATED MODULE: ./src/scripts/clothing.js\nclass ClothingRenderer {\n  constructor(outfitRenderer) {\n    this.outfitRenderer = outfitRenderer;\n    this.addedCategories = {};\n  }\n  getClothingDataFromAPI(category) {\n    const url = `https://apidojo-hm-hennes-mauritz-v1.p.rapidapi.com/products/list?country=us&lang=en&currentpage=0&pagesize=50&categories=${category}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '9762026cd5mshc7813f55876eefbp173bb3jsncec70dfa44dc',\n        'X-RapidAPI-Host': 'apidojo-hm-hennes-mauritz-v1.p.rapidapi.com'\n      }\n    };\n    fetch(url, options) // options adds headers for auth\n    .then(response => response.json()).then(clothingData => {\n      // dozi bad\n      this.category = category;\n      this.displayClothingData(clothingData);\n    }).catch(error => console.error('Error:', error));\n  }\n  displayClothingData(clothingData) {\n    this.clearClothingList(); // clears HTML for fresh list \n    for (let clothingItem of clothingData.results) {\n      this.displayClothingItem(clothingItem);\n    }\n  }\n  displayClothingItem(clothingItem) {\n    const clothingElem = document.createElement('li');\n    clothingElem.classList.add('clothing-item');\n    document.getElementById('clothing-list').appendChild(clothingElem);\n    const clothingImgElem = document.createElement('img');\n    clothingImgElem.classList.add('clothing-img');\n    clothingImgElem.src = clothingItem.images?.length > 0 ? clothingItem.images[0].url : '';\n    clothingElem.appendChild(clothingImgElem);\n    const clothingTextElem = document.createElement('div');\n    clothingTextElem.classList.add('clothing-text');\n    clothingTextElem.innerText = clothingItem.name;\n    clothingElem.appendChild(clothingTextElem);\n    const clothingButtonElem = document.createElement('button');\n    clothingButtonElem.classList.add('clothing-button');\n    clothingButtonElem.innerText = 'Try On';\n    clothingButtonElem.addEventListener('click', () => {\n      this.outfitRenderer.addClothingItem(this.category, clothingItem);\n      this.addedCategories[this.category] = true;\n    });\n    clothingElem.appendChild(clothingButtonElem);\n  }\n  clearClothingList() {\n    document.getElementById('clothing-list').innerHTML = '';\n  }\n}\n/* harmony default export */ var clothing = (ClothingRenderer);\n;// CONCATENATED MODULE: ./src/scripts/outfit.js\n\nclass OutfitRenderer {\n  constructor() {\n    this.clothingRenderer = new clothing(this);\n    this.displayedCategories = 'men';\n    this.iconDisplayNames = {\n      'tshirtstanks': 'T-Shirts',\n      'shirts': 'Long Sleeves',\n      'tops': 'Tops',\n      'shirtsblouses': 'Shirts',\n      'jacketscoats': 'Jackets',\n      'hoodiessweatshirts': 'Sweatshirts',\n      'cardigansjumpers': 'Cardigans',\n      'trousers': 'Pants',\n      'jeans': 'Jeans',\n      'skirts': 'Skirts',\n      'shorts': 'Shorts',\n      'dresses': 'Dresses'\n    };\n    this.initEventListeners();\n  }\n  initEventListeners() {\n    document.getElementById('toggle-button').addEventListener('click', () => {\n      this.displayedCategories = this.displayedCategories === 'men' ? 'women' : 'men';\n      document.getElementById('toggle-button').innerText = this.displayedCategories.toUpperCase();\n      this.displayCategories(this.categories);\n    });\n  }\n  displayCategories(categories) {\n    this.categories = categories;\n\n    // clear current HTML of the 'outfit-categories-container'\n    document.getElementById('outfit-categories-container').innerHTML = '';\n    this.clothingRenderer.clearClothingList();\n    let categoryList = categories[this.displayedCategories]; // map it out for men or women\n    for (let category of categoryList) {\n      this.displayCategory(category);\n    }\n  }\n  displayCategory(category) {\n    const unisexCategory = category.split('_')[1]; // for icons\n\n    const categoryElem = document.createElement('div');\n    categoryElem.classList.add('category-item');\n    document.getElementById('outfit-categories-container').appendChild(categoryElem);\n    const iconContainerElem = document.createElement('div');\n    iconContainerElem.classList.add('category-icon-container');\n    categoryElem.appendChild(iconContainerElem);\n    const iconTextElem = document.createElement('div');\n    iconTextElem.classList.add('category-icon-text');\n    iconTextElem.innerText = this.iconDisplayNames[unisexCategory];\n    iconContainerElem.appendChild(iconTextElem);\n    const iconImgElem = document.createElement('img');\n    iconImgElem.classList.add('category-icon-img');\n    iconImgElem.src = `./assets/images/clothing_icons/${unisexCategory}.png`;\n    iconImgElem.addEventListener('click', () => {\n      this.clothingRenderer.getClothingDataFromAPI(category);\n    });\n    iconContainerElem.appendChild(iconImgElem);\n    const clothingItemContainerElem = document.createElement('div'); // longboi\n    clothingItemContainerElem.classList.add('clothing-item-container');\n    clothingItemContainerElem.id = category;\n    categoryElem.appendChild(clothingItemContainerElem);\n\n    // TODO make remove clothing buttons only render if an item for the category was selected\n    if (!this.clothingRenderer.addedCategories[category]) {\n      const removeButtonElem = document.createElement('button');\n      removeButtonElem.innerText = 'Remove';\n      removeButtonElem.addEventListener('click', () => {\n        clothingItemContainerElem.innerHTML = '';\n      });\n      categoryElem.appendChild(removeButtonElem);\n    }\n  }\n  addClothingItem(category, clothingItem) {\n    const clothingItemContainerElem = document.getElementById(category); // searching to get from the DOM\n    clothingItemContainerElem.innerHTML = '';\n    const clothingImgElem = document.createElement('img');\n    clothingImgElem.classList.add('clothing-img');\n    clothingImgElem.src = clothingItem.images?.length > 0 ? clothingItem.images[0].url : '';\n    clothingItemContainerElem.appendChild(clothingImgElem);\n    const clothingTextElem = document.createElement('div');\n    clothingTextElem.classList.add('clothing-text');\n    clothingTextElem.innerText = clothingItem.name;\n    clothingItemContainerElem.appendChild(clothingTextElem);\n  }\n}\n/* harmony default export */ var outfit = (OutfitRenderer);\n;// CONCATENATED MODULE: ./src/scripts/weather.js\n\nclass WeatherRenderer {\n  constructor() {\n    this.initEventListeners();\n    this.outfitRenderer = new outfit();\n    this.getWeatherData();\n  }\n  initEventListeners() {\n    document.getElementById('weather-input').addEventListener('keyup', event => {\n      if (event.code === 'Enter') {\n        const zipCode = event.target.value;\n        if (this.isValidZipCode(zipCode)) this.getWeatherData(zipCode);\n      }\n    });\n    document.getElementById('search-button').addEventListener('click', () => {\n      const zipCode = document.getElementById('weather-input').value;\n      if (this.isValidZipCode(zipCode)) this.getWeatherData(zipCode);\n    });\n  }\n  getWeatherData() {\n    let zipCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    if (!zipCode) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.getWeatherDataFromAPI({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n      }\n    } else {\n      this.getWeatherDataFromAPI({\n        zipCode: zipCode,\n        countryCode: 'in'\n      });\n    }\n  }\n  getWeatherDataFromAPI(locationData) {\n    const apiKey = '5a5417f25c205e05f2bbfd938f406cb4';\n    let url = `https://api.openweathermap.org/data/2.5/weather?appid=${apiKey}&units=imperial`;\n    if (locationData.lat !== undefined && locationData.lon !== undefined) {\n      url += `&lat=${locationData.lat}&lon=${locationData.lon}`;\n    } else {\n      url += `&zip=${locationData.zipCode},${locationData.countryCode}`;\n    }\n    console.log('Request URL:', url); // Log the request URL for debugging\n\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(weatherData => {\n      console.log('Weather Data:', weatherData); // Log the weather data for debugging\n      this.displayWeatherData(weatherData);\n      const categories = this.getCategories(weatherData);\n      this.outfitRenderer.displayCategories(categories);\n    }).catch(error => console.error('Error:', error));\n  }\n  displayWeatherData(weatherData) {\n    document.getElementById('temperature-icon').src = weatherData.main.temp > 60 ? '/assets/images/clear.png' : '/assets/images/mist.png';\n    document.getElementById('temperature-text').innerText = `${Math.round(weatherData.main.temp)}°F`;\n    document.getElementById('location-text').innerText = weatherData.name;\n    document.getElementById('min-temperature-text').innerHTML = `<div>Low</div><div>${Math.round(weatherData.main.temp_min)}°F</div>`;\n    document.getElementById('max-temperature-text').innerHTML = `<div>High</div><div>${Math.round(weatherData.main.temp_max)}°F</div>`;\n  }\n  getCategories(weatherData) {\n    const mensCategories = [];\n    const womensCategories = [];\n    const temperature = weatherData.main.temp;\n    if (temperature <= 40) {\n      mensCategories.push('men_jacketscoats', 'men_hoodiessweatshirts', 'men_shirts', 'men_trousers', 'men_jeans');\n      womensCategories.push('ladies_jacketscoats', 'ladies_hoodiessweatshirts', 'ladies_trousers', 'ladies_jeans');\n    } else if (temperature > 40 && temperature <= 60) {\n      mensCategories.push('men_cardigansjumpers', 'men_hoodiessweatshirts', 'men_shirts', 'men_trousers', 'men_jeans');\n      womensCategories.push('ladies_cardigansjumpers', 'ladies_hoodiessweatshirts', 'ladies_tops', 'ladies_shirtsblouses', 'ladies_trousers', 'ladies_jeans', 'ladies_dresses');\n    } else if (temperature > 60 && temperature <= 70) {\n      mensCategories.push('men_shirts', 'men_tshirtstanks', 'men_shorts', 'men_trousers', 'men_jeans');\n      womensCategories.push('ladies_tops', 'ladies_shirtsblouses', 'ladies_trousers', 'ladies_jeans', 'ladies_skirts', 'ladies_dresses');\n    } else {\n      mensCategories.push('men_tshirtstanks', 'men_shorts');\n      womensCategories.push('ladies_tops', 'ladies_shirtsblouses', 'ladies_skirts', 'ladies_shorts', 'ladies_dresses');\n    }\n    return {\n      men: mensCategories,\n      women: womensCategories\n    };\n  }\n  isValidZipCode(zipCode) {\n    return zipCode?.length == 6 && /^\\d+$/.test(zipCode);\n  }\n}\n/* harmony default export */ var weather = (WeatherRenderer);\n;// CONCATENATED MODULE: ./src/index.js\n // noice\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new weather();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///858\n"
      );
    },
    37: function () {
      eval(
        "// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X3Byb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n"
      );
    },
  };
  __webpack_modules__[858]();
  var __webpack_exports__ = {};
  __webpack_modules__[37]();
})();
